// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/harp_sys_sequence_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "git.paylabo.com/c002/harp/backend-purchase/domain/model"
	repository "git.paylabo.com/c002/harp/backend-purchase/domain/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHarpSysSequenceRepository is a mock of HarpSysSequenceRepository interface
type MockHarpSysSequenceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHarpSysSequenceRepositoryMockRecorder
}

// MockHarpSysSequenceRepositoryMockRecorder is the mock recorder for MockHarpSysSequenceRepository
type MockHarpSysSequenceRepositoryMockRecorder struct {
	mock *MockHarpSysSequenceRepository
}

// NewMockHarpSysSequenceRepository creates a new mock instance
func NewMockHarpSysSequenceRepository(ctrl *gomock.Controller) *MockHarpSysSequenceRepository {
	mock := &MockHarpSysSequenceRepository{ctrl: ctrl}
	mock.recorder = &MockHarpSysSequenceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHarpSysSequenceRepository) EXPECT() *MockHarpSysSequenceRepositoryMockRecorder {
	return m.recorder
}

// GetHarpSysSequence mocks base method
func (m *MockHarpSysSequenceRepository) GetHarpSysSequence(ctx context.Context, params repository.GetHarpSysSequenceParams) (*model.HarpSysSequence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHarpSysSequence", ctx, params)
	ret0, _ := ret[0].(*model.HarpSysSequence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHarpSysSequence indicates an expected call of GetHarpSysSequence
func (mr *MockHarpSysSequenceRepositoryMockRecorder) GetHarpSysSequence(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHarpSysSequence", reflect.TypeOf((*MockHarpSysSequenceRepository)(nil).GetHarpSysSequence), ctx, params)
}
