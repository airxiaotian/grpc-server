// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/order_items_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "git.paylabo.com/c002/harp/backend-purchase/domain/model"
	repository "git.paylabo.com/c002/harp/backend-purchase/domain/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOrderItemsRepository is a mock of OrderItemsRepository interface
type MockOrderItemsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderItemsRepositoryMockRecorder
}

// MockOrderItemsRepositoryMockRecorder is the mock recorder for MockOrderItemsRepository
type MockOrderItemsRepositoryMockRecorder struct {
	mock *MockOrderItemsRepository
}

// NewMockOrderItemsRepository creates a new mock instance
func NewMockOrderItemsRepository(ctrl *gomock.Controller) *MockOrderItemsRepository {
	mock := &MockOrderItemsRepository{ctrl: ctrl}
	mock.recorder = &MockOrderItemsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderItemsRepository) EXPECT() *MockOrderItemsRepositoryMockRecorder {
	return m.recorder
}

// CountOrderItems mocks base method
func (m *MockOrderItemsRepository) CountOrderItems(ctx context.Context, params repository.FilterOrderItemsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOrderItems", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOrderItems indicates an expected call of CountOrderItems
func (mr *MockOrderItemsRepositoryMockRecorder) CountOrderItems(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOrderItems", reflect.TypeOf((*MockOrderItemsRepository)(nil).CountOrderItems), ctx, params)
}

// GetOrderItem mocks base method
func (m *MockOrderItemsRepository) GetOrderItem(ctx context.Context, params repository.GetOrderItemParams) (*model.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItem", ctx, params)
	ret0, _ := ret[0].(*model.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItem indicates an expected call of GetOrderItem
func (mr *MockOrderItemsRepositoryMockRecorder) GetOrderItem(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItem", reflect.TypeOf((*MockOrderItemsRepository)(nil).GetOrderItem), ctx, params)
}

// ListOrderItems mocks base method
func (m *MockOrderItemsRepository) ListOrderItems(ctx context.Context, params repository.ListOrderItemsParams) ([]*model.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderItems", ctx, params)
	ret0, _ := ret[0].([]*model.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderItems indicates an expected call of ListOrderItems
func (mr *MockOrderItemsRepositoryMockRecorder) ListOrderItems(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderItems", reflect.TypeOf((*MockOrderItemsRepository)(nil).ListOrderItems), ctx, params)
}

// SumOrderItemsPrice mocks base method
func (m *MockOrderItemsRepository) SumOrderItemsPrice(ctx context.Context, params repository.FilterOrderItemsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumOrderItemsPrice", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumOrderItemsPrice indicates an expected call of SumOrderItemsPrice
func (mr *MockOrderItemsRepositoryMockRecorder) SumOrderItemsPrice(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumOrderItemsPrice", reflect.TypeOf((*MockOrderItemsRepository)(nil).SumOrderItemsPrice), ctx, params)
}

// SumOrderItemsQuantity mocks base method
func (m *MockOrderItemsRepository) SumOrderItemsQuantity(ctx context.Context, params repository.FilterOrderItemsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumOrderItemsQuantity", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumOrderItemsQuantity indicates an expected call of SumOrderItemsQuantity
func (mr *MockOrderItemsRepositoryMockRecorder) SumOrderItemsQuantity(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumOrderItemsQuantity", reflect.TypeOf((*MockOrderItemsRepository)(nil).SumOrderItemsQuantity), ctx, params)
}

// CreateOrderItem mocks base method
func (m *MockOrderItemsRepository) CreateOrderItem(ctx context.Context, params repository.CreateOrderItemParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItem indicates an expected call of CreateOrderItem
func (mr *MockOrderItemsRepositoryMockRecorder) CreateOrderItem(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockOrderItemsRepository)(nil).CreateOrderItem), ctx, params)
}

// UpdateOrderItem mocks base method
func (m *MockOrderItemsRepository) UpdateOrderItem(ctx context.Context, params repository.UpdateOrderItemParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderItem", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderItem indicates an expected call of UpdateOrderItem
func (mr *MockOrderItemsRepositoryMockRecorder) UpdateOrderItem(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderItem", reflect.TypeOf((*MockOrderItemsRepository)(nil).UpdateOrderItem), ctx, params)
}

// DeleteOrderItem mocks base method
func (m *MockOrderItemsRepository) DeleteOrderItem(ctx context.Context, params repository.DeleteOrderItemParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderItem", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrderItem indicates an expected call of DeleteOrderItem
func (mr *MockOrderItemsRepositoryMockRecorder) DeleteOrderItem(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderItem", reflect.TypeOf((*MockOrderItemsRepository)(nil).DeleteOrderItem), ctx, params)
}
