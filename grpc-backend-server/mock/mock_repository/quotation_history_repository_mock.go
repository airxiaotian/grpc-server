// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/quotation_history_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "git.paylabo.com/c002/harp/backend-purchase/domain/model"
	repository "git.paylabo.com/c002/harp/backend-purchase/domain/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQuotationHistoryRepository is a mock of QuotationHistoryRepository interface
type MockQuotationHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuotationHistoryRepositoryMockRecorder
}

// MockQuotationHistoryRepositoryMockRecorder is the mock recorder for MockQuotationHistoryRepository
type MockQuotationHistoryRepositoryMockRecorder struct {
	mock *MockQuotationHistoryRepository
}

// NewMockQuotationHistoryRepository creates a new mock instance
func NewMockQuotationHistoryRepository(ctrl *gomock.Controller) *MockQuotationHistoryRepository {
	mock := &MockQuotationHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockQuotationHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuotationHistoryRepository) EXPECT() *MockQuotationHistoryRepositoryMockRecorder {
	return m.recorder
}

// ListQuotationHistories mocks base method
func (m *MockQuotationHistoryRepository) ListQuotationHistories(ctx context.Context, params repository.ListQuotationHistoriesParams) ([]*model.QuotationHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuotationHistories", ctx, params)
	ret0, _ := ret[0].([]*model.QuotationHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuotationHistories indicates an expected call of ListQuotationHistories
func (mr *MockQuotationHistoryRepositoryMockRecorder) ListQuotationHistories(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuotationHistories", reflect.TypeOf((*MockQuotationHistoryRepository)(nil).ListQuotationHistories), ctx, params)
}

// GetQuotationHistory mocks base method
func (m *MockQuotationHistoryRepository) GetQuotationHistory(ctx context.Context, id string) (*model.QuotationHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotationHistory", ctx, id)
	ret0, _ := ret[0].(*model.QuotationHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotationHistory indicates an expected call of GetQuotationHistory
func (mr *MockQuotationHistoryRepositoryMockRecorder) GetQuotationHistory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotationHistory", reflect.TypeOf((*MockQuotationHistoryRepository)(nil).GetQuotationHistory), ctx, id)
}

// CreateQuotationHistory mocks base method
func (m *MockQuotationHistoryRepository) CreateQuotationHistory(ctx context.Context, params repository.CreateQuotationHistoryParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuotationHistory", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuotationHistory indicates an expected call of CreateQuotationHistory
func (mr *MockQuotationHistoryRepositoryMockRecorder) CreateQuotationHistory(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuotationHistory", reflect.TypeOf((*MockQuotationHistoryRepository)(nil).CreateQuotationHistory), ctx, params)
}

// DeleteQuotationHistories mocks base method
func (m *MockQuotationHistoryRepository) DeleteQuotationHistories(ctx context.Context, params repository.DeleteQuotationHistoriesParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuotationHistories", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQuotationHistories indicates an expected call of DeleteQuotationHistories
func (mr *MockQuotationHistoryRepositoryMockRecorder) DeleteQuotationHistories(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuotationHistories", reflect.TypeOf((*MockQuotationHistoryRepository)(nil).DeleteQuotationHistories), ctx, params)
}
