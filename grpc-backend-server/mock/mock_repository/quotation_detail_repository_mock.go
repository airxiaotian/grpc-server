// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/quotation_detail_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "git.paylabo.com/c002/harp/backend-purchase/domain/model"
	repository "git.paylabo.com/c002/harp/backend-purchase/domain/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQuotationDetailRepository is a mock of QuotationDetailRepository interface
type MockQuotationDetailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuotationDetailRepositoryMockRecorder
}

// MockQuotationDetailRepositoryMockRecorder is the mock recorder for MockQuotationDetailRepository
type MockQuotationDetailRepositoryMockRecorder struct {
	mock *MockQuotationDetailRepository
}

// NewMockQuotationDetailRepository creates a new mock instance
func NewMockQuotationDetailRepository(ctrl *gomock.Controller) *MockQuotationDetailRepository {
	mock := &MockQuotationDetailRepository{ctrl: ctrl}
	mock.recorder = &MockQuotationDetailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuotationDetailRepository) EXPECT() *MockQuotationDetailRepositoryMockRecorder {
	return m.recorder
}

// ListQuotationDetails mocks base method
func (m *MockQuotationDetailRepository) ListQuotationDetails(ctx context.Context, params repository.ListQuotationDetailsParams) ([]*model.QuotationDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuotationDetails", ctx, params)
	ret0, _ := ret[0].([]*model.QuotationDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuotationDetails indicates an expected call of ListQuotationDetails
func (mr *MockQuotationDetailRepositoryMockRecorder) ListQuotationDetails(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuotationDetails", reflect.TypeOf((*MockQuotationDetailRepository)(nil).ListQuotationDetails), ctx, params)
}

// GetQuotationDetail mocks base method
func (m *MockQuotationDetailRepository) GetQuotationDetail(ctx context.Context, id string) (*model.QuotationDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotationDetail", ctx, id)
	ret0, _ := ret[0].(*model.QuotationDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotationDetail indicates an expected call of GetQuotationDetail
func (mr *MockQuotationDetailRepositoryMockRecorder) GetQuotationDetail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotationDetail", reflect.TypeOf((*MockQuotationDetailRepository)(nil).GetQuotationDetail), ctx, id)
}

// CreateQuotationDetail mocks base method
func (m *MockQuotationDetailRepository) CreateQuotationDetail(ctx context.Context, params repository.CreateQuotationDetailParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuotationDetail", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuotationDetail indicates an expected call of CreateQuotationDetail
func (mr *MockQuotationDetailRepositoryMockRecorder) CreateQuotationDetail(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuotationDetail", reflect.TypeOf((*MockQuotationDetailRepository)(nil).CreateQuotationDetail), ctx, params)
}

// CreateQuotationDetails mocks base method
func (m *MockQuotationDetailRepository) CreateQuotationDetails(ctx context.Context, params repository.CreateQuotationDetailsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuotationDetails", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuotationDetails indicates an expected call of CreateQuotationDetails
func (mr *MockQuotationDetailRepositoryMockRecorder) CreateQuotationDetails(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuotationDetails", reflect.TypeOf((*MockQuotationDetailRepository)(nil).CreateQuotationDetails), ctx, params)
}

// UpdateQuotationDetail mocks base method
func (m *MockQuotationDetailRepository) UpdateQuotationDetail(ctx context.Context, params repository.UpdateQuotationDetailParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuotationDetail", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuotationDetail indicates an expected call of UpdateQuotationDetail
func (mr *MockQuotationDetailRepositoryMockRecorder) UpdateQuotationDetail(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuotationDetail", reflect.TypeOf((*MockQuotationDetailRepository)(nil).UpdateQuotationDetail), ctx, params)
}

// UpdateQuotationDetailForDeleteOrder mocks base method
func (m *MockQuotationDetailRepository) UpdateQuotationDetailForDeleteOrder(ctx context.Context, quotationsId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuotationDetailForDeleteOrder", ctx, quotationsId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuotationDetailForDeleteOrder indicates an expected call of UpdateQuotationDetailForDeleteOrder
func (mr *MockQuotationDetailRepositoryMockRecorder) UpdateQuotationDetailForDeleteOrder(ctx, quotationsId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuotationDetailForDeleteOrder", reflect.TypeOf((*MockQuotationDetailRepository)(nil).UpdateQuotationDetailForDeleteOrder), ctx, quotationsId)
}

// DeleteQuotationDetail mocks base method
func (m *MockQuotationDetailRepository) DeleteQuotationDetail(ctx context.Context, params repository.DeleteQuotationDetailParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuotationDetail", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQuotationDetail indicates an expected call of DeleteQuotationDetail
func (mr *MockQuotationDetailRepositoryMockRecorder) DeleteQuotationDetail(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuotationDetail", reflect.TypeOf((*MockQuotationDetailRepository)(nil).DeleteQuotationDetail), ctx, params)
}

// DeleteQuotationDetails mocks base method
func (m *MockQuotationDetailRepository) DeleteQuotationDetails(ctx context.Context, params repository.DeleteQuotationDetailsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuotationDetails", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQuotationDetails indicates an expected call of DeleteQuotationDetails
func (mr *MockQuotationDetailRepositoryMockRecorder) DeleteQuotationDetails(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuotationDetails", reflect.TypeOf((*MockQuotationDetailRepository)(nil).DeleteQuotationDetails), ctx, params)
}
