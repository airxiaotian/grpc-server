// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/quotations_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "git.paylabo.com/c002/harp/backend-purchase/domain/model"
	repository "git.paylabo.com/c002/harp/backend-purchase/domain/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQuotationRepository is a mock of QuotationRepository interface
type MockQuotationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuotationRepositoryMockRecorder
}

// MockQuotationRepositoryMockRecorder is the mock recorder for MockQuotationRepository
type MockQuotationRepositoryMockRecorder struct {
	mock *MockQuotationRepository
}

// NewMockQuotationRepository creates a new mock instance
func NewMockQuotationRepository(ctrl *gomock.Controller) *MockQuotationRepository {
	mock := &MockQuotationRepository{ctrl: ctrl}
	mock.recorder = &MockQuotationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuotationRepository) EXPECT() *MockQuotationRepositoryMockRecorder {
	return m.recorder
}

// GetQuotation mocks base method
func (m *MockQuotationRepository) GetQuotation(ctx context.Context, id string) (*model.Quotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotation", ctx, id)
	ret0, _ := ret[0].(*model.Quotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotation indicates an expected call of GetQuotation
func (mr *MockQuotationRepositoryMockRecorder) GetQuotation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotation", reflect.TypeOf((*MockQuotationRepository)(nil).GetQuotation), ctx, id)
}

// ListQuotations mocks base method
func (m *MockQuotationRepository) ListQuotations(ctx context.Context, params repository.ListQuotationsParams) ([]*model.Quotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuotations", ctx, params)
	ret0, _ := ret[0].([]*model.Quotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuotations indicates an expected call of ListQuotations
func (mr *MockQuotationRepositoryMockRecorder) ListQuotations(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuotations", reflect.TypeOf((*MockQuotationRepository)(nil).ListQuotations), ctx, params)
}

// DeleteQuotation mocks base method
func (m *MockQuotationRepository) DeleteQuotation(ctx context.Context, id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuotation", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQuotation indicates an expected call of DeleteQuotation
func (mr *MockQuotationRepositoryMockRecorder) DeleteQuotation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuotation", reflect.TypeOf((*MockQuotationRepository)(nil).DeleteQuotation), ctx, id)
}

// UpdateQuotation mocks base method
func (m *MockQuotationRepository) UpdateQuotation(ctx context.Context, params repository.UpdateQuotationParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuotation", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuotation indicates an expected call of UpdateQuotation
func (mr *MockQuotationRepositoryMockRecorder) UpdateQuotation(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuotation", reflect.TypeOf((*MockQuotationRepository)(nil).UpdateQuotation), ctx, params)
}

// UpdateQuotationForDeleteOrder mocks base method
func (m *MockQuotationRepository) UpdateQuotationForDeleteOrder(ctx context.Context, orderId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuotationForDeleteOrder", ctx, orderId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuotationForDeleteOrder indicates an expected call of UpdateQuotationForDeleteOrder
func (mr *MockQuotationRepositoryMockRecorder) UpdateQuotationForDeleteOrder(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuotationForDeleteOrder", reflect.TypeOf((*MockQuotationRepository)(nil).UpdateQuotationForDeleteOrder), ctx, orderId)
}

// CreateQuotation mocks base method
func (m *MockQuotationRepository) CreateQuotation(ctx context.Context, params repository.CreateQuotationParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuotation", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuotation indicates an expected call of CreateQuotation
func (mr *MockQuotationRepositoryMockRecorder) CreateQuotation(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuotation", reflect.TypeOf((*MockQuotationRepository)(nil).CreateQuotation), ctx, params)
}

// CountQuotations mocks base method
func (m *MockQuotationRepository) CountQuotations(ctx context.Context, params repository.FilterQuotationParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountQuotations", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountQuotations indicates an expected call of CountQuotations
func (mr *MockQuotationRepositoryMockRecorder) CountQuotations(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountQuotations", reflect.TypeOf((*MockQuotationRepository)(nil).CountQuotations), ctx, params)
}

// GetQuotationsRequesterAggregate mocks base method
func (m *MockQuotationRepository) GetQuotationsRequesterAggregate(ctx context.Context, params repository.GetQuotationsAggregateParams) ([]*model.Quotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotationsRequesterAggregate", ctx, params)
	ret0, _ := ret[0].([]*model.Quotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotationsRequesterAggregate indicates an expected call of GetQuotationsRequesterAggregate
func (mr *MockQuotationRepositoryMockRecorder) GetQuotationsRequesterAggregate(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotationsRequesterAggregate", reflect.TypeOf((*MockQuotationRepository)(nil).GetQuotationsRequesterAggregate), ctx, params)
}

// GetQuotationsSupplierAggregate mocks base method
func (m *MockQuotationRepository) GetQuotationsSupplierAggregate(ctx context.Context, params repository.GetQuotationsAggregateParams) ([]*model.Quotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotationsSupplierAggregate", ctx, params)
	ret0, _ := ret[0].([]*model.Quotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotationsSupplierAggregate indicates an expected call of GetQuotationsSupplierAggregate
func (mr *MockQuotationRepositoryMockRecorder) GetQuotationsSupplierAggregate(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotationsSupplierAggregate", reflect.TypeOf((*MockQuotationRepository)(nil).GetQuotationsSupplierAggregate), ctx, params)
}

// CountQuotationsWithGroupBy mocks base method
func (m *MockQuotationRepository) CountQuotationsWithGroupBy(ctx context.Context, params repository.CountQuotationsWithGroupByParams) ([]*model.QuotationsGroupBy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountQuotationsWithGroupBy", ctx, params)
	ret0, _ := ret[0].([]*model.QuotationsGroupBy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountQuotationsWithGroupBy indicates an expected call of CountQuotationsWithGroupBy
func (mr *MockQuotationRepositoryMockRecorder) CountQuotationsWithGroupBy(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountQuotationsWithGroupBy", reflect.TypeOf((*MockQuotationRepository)(nil).CountQuotationsWithGroupBy), ctx, params)
}
