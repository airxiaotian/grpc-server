// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/contract_manager_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "git.paylabo.com/c002/harp/backend-purchase/domain/model"
	repository "git.paylabo.com/c002/harp/backend-purchase/domain/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockContractManagerDetailRepository is a mock of ContractManagerDetailRepository interface
type MockContractManagerDetailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContractManagerDetailRepositoryMockRecorder
}

// MockContractManagerDetailRepositoryMockRecorder is the mock recorder for MockContractManagerDetailRepository
type MockContractManagerDetailRepositoryMockRecorder struct {
	mock *MockContractManagerDetailRepository
}

// NewMockContractManagerDetailRepository creates a new mock instance
func NewMockContractManagerDetailRepository(ctrl *gomock.Controller) *MockContractManagerDetailRepository {
	mock := &MockContractManagerDetailRepository{ctrl: ctrl}
	mock.recorder = &MockContractManagerDetailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContractManagerDetailRepository) EXPECT() *MockContractManagerDetailRepositoryMockRecorder {
	return m.recorder
}

// ListContractManagerDetails mocks base method
func (m *MockContractManagerDetailRepository) ListContractManagerDetails(ctx context.Context, params repository.ListContractManagerDetailsParams) ([]*model.ContractManagerDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContractManagerDetails", ctx, params)
	ret0, _ := ret[0].([]*model.ContractManagerDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContractManagerDetails indicates an expected call of ListContractManagerDetails
func (mr *MockContractManagerDetailRepositoryMockRecorder) ListContractManagerDetails(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContractManagerDetails", reflect.TypeOf((*MockContractManagerDetailRepository)(nil).ListContractManagerDetails), ctx, params)
}

// GetContractManagerDetail mocks base method
func (m *MockContractManagerDetailRepository) GetContractManagerDetail(ctx context.Context, id string) (*model.ContractManagerDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractManagerDetail", ctx, id)
	ret0, _ := ret[0].(*model.ContractManagerDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractManagerDetail indicates an expected call of GetContractManagerDetail
func (mr *MockContractManagerDetailRepositoryMockRecorder) GetContractManagerDetail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractManagerDetail", reflect.TypeOf((*MockContractManagerDetailRepository)(nil).GetContractManagerDetail), ctx, id)
}

// CountContractManagerDetails mocks base method
func (m *MockContractManagerDetailRepository) CountContractManagerDetails(ctx context.Context, params repository.CountContractManagerDetailsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountContractManagerDetails", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountContractManagerDetails indicates an expected call of CountContractManagerDetails
func (mr *MockContractManagerDetailRepositoryMockRecorder) CountContractManagerDetails(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountContractManagerDetails", reflect.TypeOf((*MockContractManagerDetailRepository)(nil).CountContractManagerDetails), ctx, params)
}

// CreateContractManagerDetail mocks base method
func (m *MockContractManagerDetailRepository) CreateContractManagerDetail(ctx context.Context, params repository.CreateContractManagerDetailParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContractManagerDetail", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContractManagerDetail indicates an expected call of CreateContractManagerDetail
func (mr *MockContractManagerDetailRepositoryMockRecorder) CreateContractManagerDetail(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContractManagerDetail", reflect.TypeOf((*MockContractManagerDetailRepository)(nil).CreateContractManagerDetail), ctx, params)
}

// UpdateContractManagerDetail mocks base method
func (m *MockContractManagerDetailRepository) UpdateContractManagerDetail(ctx context.Context, params repository.UpdateContractManagerDetailParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContractManagerDetail", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContractManagerDetail indicates an expected call of UpdateContractManagerDetail
func (mr *MockContractManagerDetailRepositoryMockRecorder) UpdateContractManagerDetail(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContractManagerDetail", reflect.TypeOf((*MockContractManagerDetailRepository)(nil).UpdateContractManagerDetail), ctx, params)
}

// DeleteContractManagerDetail mocks base method
func (m *MockContractManagerDetailRepository) DeleteContractManagerDetail(ctx context.Context, params repository.DeleteContractManagerDetailParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContractManagerDetail", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContractManagerDetail indicates an expected call of DeleteContractManagerDetail
func (mr *MockContractManagerDetailRepositoryMockRecorder) DeleteContractManagerDetail(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContractManagerDetail", reflect.TypeOf((*MockContractManagerDetailRepository)(nil).DeleteContractManagerDetail), ctx, params)
}
