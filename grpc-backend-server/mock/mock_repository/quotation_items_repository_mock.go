// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/quotation_items_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "git.paylabo.com/c002/harp/backend-purchase/domain/model"
	repository "git.paylabo.com/c002/harp/backend-purchase/domain/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQuotationItemsRepository is a mock of QuotationItemsRepository interface
type MockQuotationItemsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuotationItemsRepositoryMockRecorder
}

// MockQuotationItemsRepositoryMockRecorder is the mock recorder for MockQuotationItemsRepository
type MockQuotationItemsRepositoryMockRecorder struct {
	mock *MockQuotationItemsRepository
}

// NewMockQuotationItemsRepository creates a new mock instance
func NewMockQuotationItemsRepository(ctrl *gomock.Controller) *MockQuotationItemsRepository {
	mock := &MockQuotationItemsRepository{ctrl: ctrl}
	mock.recorder = &MockQuotationItemsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuotationItemsRepository) EXPECT() *MockQuotationItemsRepositoryMockRecorder {
	return m.recorder
}

// GetQuotationItem mocks base method
func (m *MockQuotationItemsRepository) GetQuotationItem(ctx context.Context, id string) (*model.QuotationItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotationItem", ctx, id)
	ret0, _ := ret[0].(*model.QuotationItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotationItem indicates an expected call of GetQuotationItem
func (mr *MockQuotationItemsRepositoryMockRecorder) GetQuotationItem(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotationItem", reflect.TypeOf((*MockQuotationItemsRepository)(nil).GetQuotationItem), ctx, id)
}

// ListQuotationItems mocks base method
func (m *MockQuotationItemsRepository) ListQuotationItems(ctx context.Context, params repository.ListQuotationItemsParams) ([]*model.QuotationItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuotationItems", ctx, params)
	ret0, _ := ret[0].([]*model.QuotationItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuotationItems indicates an expected call of ListQuotationItems
func (mr *MockQuotationItemsRepositoryMockRecorder) ListQuotationItems(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuotationItems", reflect.TypeOf((*MockQuotationItemsRepository)(nil).ListQuotationItems), ctx, params)
}
