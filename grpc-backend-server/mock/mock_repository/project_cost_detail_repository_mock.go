// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/project_cost_detail_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "git.paylabo.com/c002/harp/backend-purchase/domain/model"
	repository "git.paylabo.com/c002/harp/backend-purchase/domain/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProjectCostDetailRepository is a mock of ProjectCostDetailRepository interface
type MockProjectCostDetailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProjectCostDetailRepositoryMockRecorder
}

// MockProjectCostDetailRepositoryMockRecorder is the mock recorder for MockProjectCostDetailRepository
type MockProjectCostDetailRepositoryMockRecorder struct {
	mock *MockProjectCostDetailRepository
}

// NewMockProjectCostDetailRepository creates a new mock instance
func NewMockProjectCostDetailRepository(ctrl *gomock.Controller) *MockProjectCostDetailRepository {
	mock := &MockProjectCostDetailRepository{ctrl: ctrl}
	mock.recorder = &MockProjectCostDetailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProjectCostDetailRepository) EXPECT() *MockProjectCostDetailRepositoryMockRecorder {
	return m.recorder
}

// ListProjectCostDetails mocks base method
func (m *MockProjectCostDetailRepository) ListProjectCostDetails(ctx context.Context, params repository.ListProjectCostDetailsParams) ([]*model.ProjectCostDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectCostDetails", ctx, params)
	ret0, _ := ret[0].([]*model.ProjectCostDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectCostDetails indicates an expected call of ListProjectCostDetails
func (mr *MockProjectCostDetailRepositoryMockRecorder) ListProjectCostDetails(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectCostDetails", reflect.TypeOf((*MockProjectCostDetailRepository)(nil).ListProjectCostDetails), ctx, params)
}

// GetProjectCostDetail mocks base method
func (m *MockProjectCostDetailRepository) GetProjectCostDetail(ctx context.Context, id string) (*model.ProjectCostDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectCostDetail", ctx, id)
	ret0, _ := ret[0].(*model.ProjectCostDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectCostDetail indicates an expected call of GetProjectCostDetail
func (mr *MockProjectCostDetailRepositoryMockRecorder) GetProjectCostDetail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectCostDetail", reflect.TypeOf((*MockProjectCostDetailRepository)(nil).GetProjectCostDetail), ctx, id)
}

// CountProjectCostDetails mocks base method
func (m *MockProjectCostDetailRepository) CountProjectCostDetails(ctx context.Context, params repository.CountProjectCostDetailsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProjectCostDetails", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProjectCostDetails indicates an expected call of CountProjectCostDetails
func (mr *MockProjectCostDetailRepositoryMockRecorder) CountProjectCostDetails(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProjectCostDetails", reflect.TypeOf((*MockProjectCostDetailRepository)(nil).CountProjectCostDetails), ctx, params)
}

// CreateProjectCostDetail mocks base method
func (m *MockProjectCostDetailRepository) CreateProjectCostDetail(ctx context.Context, params repository.CreateProjectCostDetailParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectCostDetail", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProjectCostDetail indicates an expected call of CreateProjectCostDetail
func (mr *MockProjectCostDetailRepositoryMockRecorder) CreateProjectCostDetail(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectCostDetail", reflect.TypeOf((*MockProjectCostDetailRepository)(nil).CreateProjectCostDetail), ctx, params)
}

// UpdateProjectCostDetail mocks base method
func (m *MockProjectCostDetailRepository) UpdateProjectCostDetail(ctx context.Context, params repository.UpdateProjectCostDetailParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectCostDetail", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProjectCostDetail indicates an expected call of UpdateProjectCostDetail
func (mr *MockProjectCostDetailRepositoryMockRecorder) UpdateProjectCostDetail(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectCostDetail", reflect.TypeOf((*MockProjectCostDetailRepository)(nil).UpdateProjectCostDetail), ctx, params)
}

// DeleteProjectCostDetail mocks base method
func (m *MockProjectCostDetailRepository) DeleteProjectCostDetail(ctx context.Context, params repository.DeleteProjectCostDetailParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectCostDetail", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectCostDetail indicates an expected call of DeleteProjectCostDetail
func (mr *MockProjectCostDetailRepositoryMockRecorder) DeleteProjectCostDetail(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectCostDetail", reflect.TypeOf((*MockProjectCostDetailRepository)(nil).DeleteProjectCostDetail), ctx, params)
}
