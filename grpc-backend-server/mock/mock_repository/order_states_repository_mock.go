// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/order_states_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "git.paylabo.com/c002/harp/backend-purchase/domain/model"
	repository "git.paylabo.com/c002/harp/backend-purchase/domain/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOrderStatesRepository is a mock of OrderStatesRepository interface
type MockOrderStatesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStatesRepositoryMockRecorder
}

// MockOrderStatesRepositoryMockRecorder is the mock recorder for MockOrderStatesRepository
type MockOrderStatesRepositoryMockRecorder struct {
	mock *MockOrderStatesRepository
}

// NewMockOrderStatesRepository creates a new mock instance
func NewMockOrderStatesRepository(ctrl *gomock.Controller) *MockOrderStatesRepository {
	mock := &MockOrderStatesRepository{ctrl: ctrl}
	mock.recorder = &MockOrderStatesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderStatesRepository) EXPECT() *MockOrderStatesRepositoryMockRecorder {
	return m.recorder
}

// GetOrderState mocks base method
func (m *MockOrderStatesRepository) GetOrderState(ctx context.Context, params repository.GetOrderStateParams) (*model.OrderState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderState", ctx, params)
	ret0, _ := ret[0].(*model.OrderState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderState indicates an expected call of GetOrderState
func (mr *MockOrderStatesRepositoryMockRecorder) GetOrderState(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderState", reflect.TypeOf((*MockOrderStatesRepository)(nil).GetOrderState), ctx, params)
}

// ListOrderStates mocks base method
func (m *MockOrderStatesRepository) ListOrderStates(ctx context.Context, params repository.ListOrderStatesParams) ([]*model.OrderState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderStates", ctx, params)
	ret0, _ := ret[0].([]*model.OrderState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderStates indicates an expected call of ListOrderStates
func (mr *MockOrderStatesRepositoryMockRecorder) ListOrderStates(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderStates", reflect.TypeOf((*MockOrderStatesRepository)(nil).ListOrderStates), ctx, params)
}
