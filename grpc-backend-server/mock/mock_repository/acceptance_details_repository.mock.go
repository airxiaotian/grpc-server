// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/acceptance_details_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "git.paylabo.com/c002/harp/backend-purchase/domain/model"
	repository "git.paylabo.com/c002/harp/backend-purchase/domain/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockAcceptanceDetailsRepository is a mock of AcceptanceDetailsRepository interface
type MockAcceptanceDetailsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAcceptanceDetailsRepositoryMockRecorder
}

// MockAcceptanceDetailsRepositoryMockRecorder is the mock recorder for MockAcceptanceDetailsRepository
type MockAcceptanceDetailsRepositoryMockRecorder struct {
	mock *MockAcceptanceDetailsRepository
}

// NewMockAcceptanceDetailsRepository creates a new mock instance
func NewMockAcceptanceDetailsRepository(ctrl *gomock.Controller) *MockAcceptanceDetailsRepository {
	mock := &MockAcceptanceDetailsRepository{ctrl: ctrl}
	mock.recorder = &MockAcceptanceDetailsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAcceptanceDetailsRepository) EXPECT() *MockAcceptanceDetailsRepositoryMockRecorder {
	return m.recorder
}

// ListAcceptanceDetails mocks base method
func (m *MockAcceptanceDetailsRepository) ListAcceptanceDetails(ctx context.Context, param repository.ListAcceptanceDetailsParam) ([]*model.AcceptanceDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAcceptanceDetails", ctx, param)
	ret0, _ := ret[0].([]*model.AcceptanceDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAcceptanceDetails indicates an expected call of ListAcceptanceDetails
func (mr *MockAcceptanceDetailsRepositoryMockRecorder) ListAcceptanceDetails(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAcceptanceDetails", reflect.TypeOf((*MockAcceptanceDetailsRepository)(nil).ListAcceptanceDetails), ctx, param)
}

// GetAcceptanceDetail mocks base method
func (m *MockAcceptanceDetailsRepository) GetAcceptanceDetail(ctx context.Context, id string) (*model.AcceptanceDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcceptanceDetail", ctx, id)
	ret0, _ := ret[0].(*model.AcceptanceDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAcceptanceDetail indicates an expected call of GetAcceptanceDetail
func (mr *MockAcceptanceDetailsRepositoryMockRecorder) GetAcceptanceDetail(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcceptanceDetail", reflect.TypeOf((*MockAcceptanceDetailsRepository)(nil).GetAcceptanceDetail), ctx, id)
}

// CreateAcceptanceDetail mocks base method
func (m *MockAcceptanceDetailsRepository) CreateAcceptanceDetail(ctx context.Context, param repository.CreateAcceptanceDetailParam) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAcceptanceDetail", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAcceptanceDetail indicates an expected call of CreateAcceptanceDetail
func (mr *MockAcceptanceDetailsRepositoryMockRecorder) CreateAcceptanceDetail(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAcceptanceDetail", reflect.TypeOf((*MockAcceptanceDetailsRepository)(nil).CreateAcceptanceDetail), ctx, param)
}

// CreateAcceptanceDetails mocks base method
func (m *MockAcceptanceDetailsRepository) CreateAcceptanceDetails(ctx context.Context, param repository.CreateAcceptanceDetailsParam) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAcceptanceDetails", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAcceptanceDetails indicates an expected call of CreateAcceptanceDetails
func (mr *MockAcceptanceDetailsRepositoryMockRecorder) CreateAcceptanceDetails(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAcceptanceDetails", reflect.TypeOf((*MockAcceptanceDetailsRepository)(nil).CreateAcceptanceDetails), ctx, param)
}

// UpdateAcceptanceDetail mocks base method
func (m *MockAcceptanceDetailsRepository) UpdateAcceptanceDetail(ctx context.Context, param repository.UpdateAcceptanceDetailParam) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcceptanceDetail", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcceptanceDetail indicates an expected call of UpdateAcceptanceDetail
func (mr *MockAcceptanceDetailsRepositoryMockRecorder) UpdateAcceptanceDetail(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceptanceDetail", reflect.TypeOf((*MockAcceptanceDetailsRepository)(nil).UpdateAcceptanceDetail), ctx, param)
}

// UpdateAcceptanceDetails mocks base method
func (m *MockAcceptanceDetailsRepository) UpdateAcceptanceDetails(ctx context.Context, param repository.UpdateAcceptanceDetailsParam) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcceptanceDetails", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcceptanceDetails indicates an expected call of UpdateAcceptanceDetails
func (mr *MockAcceptanceDetailsRepositoryMockRecorder) UpdateAcceptanceDetails(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceptanceDetails", reflect.TypeOf((*MockAcceptanceDetailsRepository)(nil).UpdateAcceptanceDetails), ctx, param)
}

// DeleteAcceptanceDetail mocks base method
func (m *MockAcceptanceDetailsRepository) DeleteAcceptanceDetail(ctx context.Context, param repository.DeleteAcceptanceDetailsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAcceptanceDetail", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAcceptanceDetail indicates an expected call of DeleteAcceptanceDetail
func (mr *MockAcceptanceDetailsRepositoryMockRecorder) DeleteAcceptanceDetail(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAcceptanceDetail", reflect.TypeOf((*MockAcceptanceDetailsRepository)(nil).DeleteAcceptanceDetail), ctx, param)
}

// SumAcceptanceDetailsReturnQuantity mocks base method
func (m *MockAcceptanceDetailsRepository) SumAcceptanceDetailsReturnQuantity(ctx context.Context, param repository.ListAcceptanceDetailsParam) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumAcceptanceDetailsReturnQuantity", ctx, param)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumAcceptanceDetailsReturnQuantity indicates an expected call of SumAcceptanceDetailsReturnQuantity
func (mr *MockAcceptanceDetailsRepositoryMockRecorder) SumAcceptanceDetailsReturnQuantity(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumAcceptanceDetailsReturnQuantity", reflect.TypeOf((*MockAcceptanceDetailsRepository)(nil).SumAcceptanceDetailsReturnQuantity), ctx, param)
}

// SumAcceptanceDetailsAcceptanceQuantity mocks base method
func (m *MockAcceptanceDetailsRepository) SumAcceptanceDetailsAcceptanceQuantity(ctx context.Context, param repository.ListAcceptanceDetailsParam) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumAcceptanceDetailsAcceptanceQuantity", ctx, param)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumAcceptanceDetailsAcceptanceQuantity indicates an expected call of SumAcceptanceDetailsAcceptanceQuantity
func (mr *MockAcceptanceDetailsRepositoryMockRecorder) SumAcceptanceDetailsAcceptanceQuantity(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumAcceptanceDetailsAcceptanceQuantity", reflect.TypeOf((*MockAcceptanceDetailsRepository)(nil).SumAcceptanceDetailsAcceptanceQuantity), ctx, param)
}

// UpdateAcceptanceDetailModuleUnregister mocks base method
func (m *MockAcceptanceDetailsRepository) UpdateAcceptanceDetailModuleUnregister(ctx context.Context, param repository.UpdateAcceptanceDetailModuleUnregisterParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcceptanceDetailModuleUnregister", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAcceptanceDetailModuleUnregister indicates an expected call of UpdateAcceptanceDetailModuleUnregister
func (mr *MockAcceptanceDetailsRepositoryMockRecorder) UpdateAcceptanceDetailModuleUnregister(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceptanceDetailModuleUnregister", reflect.TypeOf((*MockAcceptanceDetailsRepository)(nil).UpdateAcceptanceDetailModuleUnregister), ctx, param)
}

// SumAcceptanceDetailsScheduledAcceptanceQuantity mocks base method
func (m *MockAcceptanceDetailsRepository) SumAcceptanceDetailsScheduledAcceptanceQuantity(ctx context.Context, param repository.ListAcceptanceDetailsParam) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumAcceptanceDetailsScheduledAcceptanceQuantity", ctx, param)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumAcceptanceDetailsScheduledAcceptanceQuantity indicates an expected call of SumAcceptanceDetailsScheduledAcceptanceQuantity
func (mr *MockAcceptanceDetailsRepositoryMockRecorder) SumAcceptanceDetailsScheduledAcceptanceQuantity(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumAcceptanceDetailsScheduledAcceptanceQuantity", reflect.TypeOf((*MockAcceptanceDetailsRepository)(nil).SumAcceptanceDetailsScheduledAcceptanceQuantity), ctx, param)
}
