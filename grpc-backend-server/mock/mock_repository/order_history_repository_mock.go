// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/order_history_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "git.paylabo.com/c002/harp/backend-purchase/domain/model"
	repository "git.paylabo.com/c002/harp/backend-purchase/domain/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderHistoryRepository is a mock of OrderHistoryRepository interface
type MockOrderHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderHistoryRepositoryMockRecorder
}

// MockOrderHistoryRepositoryMockRecorder is the mock recorder for MockOrderHistoryRepository
type MockOrderHistoryRepositoryMockRecorder struct {
	mock *MockOrderHistoryRepository
}

// NewMockOrderHistoryRepository creates a new mock instance
func NewMockOrderHistoryRepository(ctrl *gomock.Controller) *MockOrderHistoryRepository {
	mock := &MockOrderHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockOrderHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderHistoryRepository) EXPECT() *MockOrderHistoryRepositoryMockRecorder {
	return m.recorder
}

// ListOrderHistories mocks base method
func (m *MockOrderHistoryRepository) ListOrderHistories(ctx context.Context, params repository.ListOrderHistoriesParams) ([]*model.OrderHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderHistories", ctx, params)
	ret0, _ := ret[0].([]*model.OrderHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderHistories indicates an expected call of ListOrderHistories
func (mr *MockOrderHistoryRepositoryMockRecorder) ListOrderHistories(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderHistories", reflect.TypeOf((*MockOrderHistoryRepository)(nil).ListOrderHistories), ctx, params)
}

// GetOrderHistory mocks base method
func (m *MockOrderHistoryRepository) GetOrderHistory(ctx context.Context, id string) (*model.OrderHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderHistory", ctx, id)
	ret0, _ := ret[0].(*model.OrderHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderHistory indicates an expected call of GetOrderHistory
func (mr *MockOrderHistoryRepositoryMockRecorder) GetOrderHistory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderHistory", reflect.TypeOf((*MockOrderHistoryRepository)(nil).GetOrderHistory), ctx, id)
}

// CreateOrderHistory mocks base method
func (m *MockOrderHistoryRepository) CreateOrderHistory(ctx context.Context, params repository.CreateOrderHistoryParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderHistory", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderHistory indicates an expected call of CreateOrderHistory
func (mr *MockOrderHistoryRepositoryMockRecorder) CreateOrderHistory(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderHistory", reflect.TypeOf((*MockOrderHistoryRepository)(nil).CreateOrderHistory), ctx, params)
}
